import argparse
import os
import sys
import json
from datetime import datetime, date
from csv import DictReader

import covizu
from covizu.utils import seq_utils
from covizu.utils.progress_utils import Callback
from covizu.utils.batch_utils import *
from covizu.minimap2 import extract_features

import gzip
import lzma
import codecs


def unescaped_str(arg_str):
    """ https://stackoverflow.com/questions/34145686/handling-argparse-escaped-character-as-option """
    return codecs.decode(str(arg_str), 'unicode_escape')


def parse_args():
    parser = argparse.ArgumentParser(
        description="CoVizu analysis pipeline automation for execution on local files"
    )

    parser.add_argument("infile", type=str,
                        help="input, path to FASTA file with genome sequences.")

    compression = parser.add_mutually_exclusive_group()
    compression.add_argument("--gzip", action="store_true", help="FASTA is gzip-compressed.")
    compression.add_argument("--xz", action="store_true", help="FASTA is xz-compressed.")

    parser.add_argument("lineages", type=argparse.FileType('r'),
                        help="input, CSV output generated by Pangolin")
    parser.add_argument("metadata", type=argparse.FileType('r'),
                        help="input, CSV containing metadata")

    parser.add_argument("--delimiter", type=unescaped_str, default=',',
                        help="delimiter character for metadata CSV; use '\t' if tab-delimited")
    parser.add_argument("--name", type=str, default="name",
                        help="column label for virus sample name in metadata CSV; must match FASTA")
    parser.add_argument("--coldate", type=str, default="date",
                        help="column label for collection date in metadata CSV")
    parser.add_argument("--region", type=str, default="region",
                        help="column label for continent/region (e.g., Africa) in metadata CSV")
    parser.add_argument("--country", type=str, default="country",
                        help="column label for country in metadata CSV")
    parser.add_argument("--division", type=str, default=None,
                        help="column label for country division (e.g., province) in metadata CSV; "
                             "defaults to None")

    parser.add_argument("--outdir", type=str, default='data/',
                        help="option, path to write output files")

    parser.add_argument("--bylineage", type=str, default='data/by_lineage.json',
                        help="path to write JSON of features by lineage")

    parser.add_argument('--minlen', type=int, default=29000, help='minimum genome length (nt)')
    parser.add_argument('--mindate', type=str, default='2019-12-01',
                        help='earliest possible sample collection date (ISO format, default '
                             '2019-12-01')
    parser.add_argument('--poisson-cutoff', type=float, default=0.001,
                        help='filtering outlying genomes whose distance exceeds the upper '
                             'quantile of Poisson distribution (molecular clock).  Default 0.001 '
                             'corresponds to 99.9%% cutoff.')

    parser.add_argument('--batchsize', type=int, default=500,
                        help='number of records to batch process with minimap2')

    parser.add_argument("--ref", type=str,
                        default=os.path.join(covizu.__path__[0], "data/NC_045512.fa"),
                        help="path to FASTA file with reference genome")
    parser.add_argument('--mmbin', type=str, default='minimap2',
                        help="path to minimap2 binary executable")
    parser.add_argument('-mmt', "--mmthreads", type=int, default=8,
                        help="number of threads for minimap2.")

    parser.add_argument('--misstol', type=int, default=300,
                        help="maximum tolerated number of missing bases per "
                             "genome (default 300).")
    parser.add_argument("--vcf", type=str,
                        default=os.path.join(covizu.__path__[0], "data/problematic_sites_sarsCov2.vcf"),
                        help="Path to VCF file of problematic sites in SARS-COV-2 genome. "
                             "Source: https://github.com/W-L/ProblematicSites_SARS-CoV2")

    parser.add_argument('--ft2bin', default='fasttree2',
                        help='path to fasttree2 binary executable')

    parser.add_argument('--ttbin', default='treetime',
                        help='path to treetime binary executable')
    parser.add_argument('--clock', type=float, default=8e-4,
                        help='specify molecular clock rate for '
                             'constraining Treetime analysis (default 8e-4).')

    parser.add_argument('--datetol', type=float, default=0.1,
                        help='exclude tips from time-scaled tree '
                             'with high discordance between estimated and '
                             'known sample collection dates (year units,'
                             'default: 0.1)')

    parser.add_argument('--binpath', type=str, default='rapidnj',
                        help='path to RapidNJ binary executable')
    parser.add_argument('--mincount', type=int, default=500,
                        help='minimum number of variants in lineage '
                             'above which MPI processing will be used.')
    parser.add_argument('--machine_file', type=str, default='mfile',
                        help='path to machine file for MPI.')
    parser.add_argument("-n", "--nboot", type=int, default=100,
                        help="Number of bootstrap samples, default 100.")

    parser.add_argument("--boot-cutoff", type=float, default=0.5,
                        help="Bootstrap cutoff for consensus tree (default 0.5). "
                             "Only used if --cons is specified.")

    return parser.parse_args()


def parse_metadata(handle, delimiter=',', callback=None):
    """

    :param args:  Namespace from argparse
    """
    reader = DictReader(handle, delimiter=delimiter)

    # check fieldnames
    fieldnames = [args.name, args.coldate, args.region, args.country]
    if args.division:
        fieldnames.append(args.division)
    for field in fieldnames:
        if field not in reader.fieldnames:
            if callback:
                callback("Missing fieldname {} in metadata CSV".format(field), level='ERROR')
                callback(reader.fieldnames, level='ERROR')
            sys.exit()

    metadata = {}
    for row in reader:
        metadata.update({row[args.name]: {
            'coldate': row[args.coldate],
            'region': row[args.region],
            'country': row[args.country],
            'division': row.get(args.division, None)
        }})

    return metadata


def stream_local(handle, lineage_file, metadata, minlen=29000, mindate='2019-12-01', callback=None):
    """
    Convert local FASTA file to feed-like object - replaces load_gisaid()
    :param handle:  file handle, open in read mode to FASTA
    :param lineage_file:  file handle, open in read mode to Pangolin CSV output
    :param metadata:  dict, returned from parse_metadata()
    :param minlen:  int, minimum genome length
    :param mindate:  str, earliest sample collection date in ISO-8601 format
    :param callback:  optional Callback() object
    """
    mindate = seq_utils.fromisoformat(mindate)

    # parse CSV output from Pangolin
    reader = DictReader(lineage_file)
    if 'taxon' not in reader.fieldnames or 'lineage' not in reader.fieldnames:
        if callback:
            callback("Lineage CSV header does not match expected.", level='ERROR')
        sys.exit()

    lineages = {}
    for row in reader:
        lineages.update({row['taxon']: row['lineage']})

    rejects = {'short': 0, 'baddate': 0, 'nonhuman': 0}
    for label, seq in seq_utils.iter_fasta(handle):
        if label not in metadata:
            if callback:
                callback("Failed to retrieve metadata for genome {}".format(label), level='ERROR')
                sys.exit()
            sys.exit()

        if len(seq) < minlen:
            rejects['short'] += 1
            continue  # sequence is too short

        coldate = metadata[label]['coldate']
        if coldate.count('-') != 2:
            rejects['baddate'] += 1
            continue  # incomplete collection date
        dt = seq_utils.fromisoformat(coldate)
        if dt < mindate or dt > date.today():
            rejects['baddate'] += 1
            continue  # reject records with non-sensical collection date

        lineage = lineages.get(label, None)
        if lineage is None:
            if callback:
                callback(
                    "Failed to retrieve lineage assignment for {}".format(header),
                    level='ERROR'
                )
            sys.exit()

        record = {
            'label': label,
            'sequence': seq,
            'coldate': coldate,
            'region': metadata[label]['region'],
            'country': metadata[label]['country'],
            'division': metadata[label]['division'],
            'lineage': lineage
        }
        yield record

    if callback:
        callback("Rejected {short} short genomes\n"
                 "         {baddate} records with bad dates\n"
                 "         {nonhuman} non-human genomes".format(**rejects))


if __name__ == "__main__":
    args = parse_args()
    cb = Callback()

    # check that user has loaded openmpi module
    try:
        subprocess.check_call(['mpirun', '-np', '2', 'ls'], stdout=subprocess.DEVNULL)
    except FileNotFoundError:
        cb.callback("mpirun not loaded - run `module load openmpi/gnu`", level='ERROR')
        sys.exit()

    metadata = parse_metadata(args.metadata, args.delimiter, cb.callback)

    if args.gzip:
        handle = gzip.open(args.infile, 'rt')
    elif args.xz:
        handle = lzma.open(args.infile, 'rt')
    else:
        handle = open(args.infile)

    loader = stream_local(handle, args.lineages, metadata, minlen=args.minlen,
                          mindate=args.mindate, callback=cb.callback)
    batcher = seq_utils.batch_fasta(loader, size=args.batchsize)
    aligned = extract_features(batcher, ref_file=args.ref, binpath=args.mmbin,
                               nthread=args.mmthreads, minlen=args.minlen)
    filtered = seq_utils.filter_problematic(aligned, vcf_file=args.vcf, cutoff=args.poisson_cutoff,
                                               callback=cb.callback)
    by_lineage = sort_by_lineage(filtered, callback=cb.callback)

    with open(args.bylineage, 'w') as handle:
        # export to file to process large lineages with MPI
        json.dump(by_lineage, handle)

    # reconstruct time-scaled tree
    timetree, residuals = build_timetree(by_lineage, args, cb.callback)
    timestamp = datetime.now().isoformat().split('.')[0]
    nwk_file = os.path.join(args.outdir, 'timetree.{}.nwk'.format(timestamp))
    with open(nwk_file, 'w') as handle:
        Phylo.write(timetree, file=handle, format='newick')

    # generate beadplots and serialize to file
    result = make_beadplots(by_lineage, args, cb.callback, t0=cb.t0.timestamp())
    outfile = open(os.path.join(args.outdir, 'clusters.{}.json'.format(timestamp)), 'w')
    outfile.write(json.dumps(result))  # serialize results to JSON
    outfile.close()

    # write data stats
    dbstat_file = os.path.join(args.outdir, 'dbstats.{}.json'.format(timestamp))
    with open(dbstat_file, 'w') as handle:
        nseqs = sum([len(rows) for rows in by_lineage.values()])
        val = {
            'lastupdate': timestamp.split('T')[0],
            'noseqs': nseqs,
            'lineages': {}
        }
        for lineage, samples in by_lineage.items():
            ndiffs = [len(x['diffs']) for x in samples]
            val['lineages'][lineage] = {
                'nsamples': len(samples),
                'lastcoldate': max(x['covv_collection_date'] for x in samples),
                'residual': residuals[lineage],
                'max_ndiffs': max(ndiffs),
                'mean_ndiffs': sum(ndiffs)/len(ndiffs)
            }
        json.dump(val, handle)

    cb.callback("All done!")
